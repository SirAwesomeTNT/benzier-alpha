import numpy as np
import matplotlib.pyplot as plt

def plot_interpolated_points(xorig, yorig, totalPoints):
    # Determine spacing needed along the x-axis
    x_spacing = (xorig[-1] - xorig[0]) / (totalPoints - 1)

    # Fill x-axis with regularly spaced values
    xnew = np.linspace(xorig[0], xorig[-1], totalPoints)

    # Initialize array for ynew
    ynew = np.zeros_like(xnew)

    # Calculate y-values on line segments connecting the original points
    for i in range(len(xorig) - 1):
        mask = (xnew >= xorig[i]) & (xnew <= xorig[i + 1])
        x_segment = xnew[mask]

        # Linear interpolation for y-values
        y_interp = yorig[i] + (yorig[i + 1] - yorig[i]) / (xorig[i + 1] - xorig[i]) * (x_segment - xorig[i])

        # Update ynew array
        ynew[mask] = y_interp

    # Plot the result
    plt.scatter(xnew, ynew, color='red', label='Interpolated Points', s=8)
    plt.scatter(xorig, yorig, color='blue', label='Original Points')

    # Add labels and legend
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.legend()
    plt.title('Interpolated Points with Original Points')

    # Show the plot
    plt.show()

# Example usage
xorig = np.array([0, 1, 2, 3, 4, 5])
yorig = np.array([4, 1, 0, 1, 4, 9])
plot_interpolated_points(xorig, yorig, 100)
